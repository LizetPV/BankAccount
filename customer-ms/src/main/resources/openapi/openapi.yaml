openapi: 3.0.3
info:
  title: Customer API
  version: 1.0.0
servers:
  - url: http://localhost:8081

paths:
  /api/v1/clientes:
    get:
      tags: [Clientes]
      operationId: listCustomers
      summary: Listar clientes (paginado + búsqueda)
      parameters:
        - in: query
          name: q
          description: Búsqueda libre (dni, email, nombre)
          schema: { type: string }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Página de clientes
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerPage' }

    post:
      tags: [Clientes]
      operationId: createCustomer
      summary: Crear cliente
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerCreateDto' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerDto' }

  /api/v1/clientes/{id}:
    get:
      tags: [Clientes]
      operationId: getCustomer
      summary: Obtener cliente por id
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerDto' }
        '404': { description: No encontrado }

    put:
      tags: [Clientes]
      operationId: updateCustomer
      summary: Actualizar cliente
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerUpdateDto' }
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerDto' }

    delete:
      tags: [Clientes]
      operationId: deleteCustomer
      summary: Eliminar cliente
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204': { description: Eliminado }

components:
  parameters:
    Id:   { in: path, name: id, required: true, schema: { type: integer, format: int64 } }
    Page: { in: query, name: page, schema: { type: integer, minimum: 0, default: 0 } }
    Size: { in: query, name: size, schema: { type: integer, minimum: 1, maximum: 50, default: 10 } }
    Sort: { in: query, name: sort, schema: { type: string, example: "id,desc" } }

  schemas:
    CustomerDto:
      type: object
      properties:
        id:        { type: integer, format: int64 }
        firstName: { type: string }
        lastName:  { type: string }
        dni:       { type: string }
        email:     { type: string, format: email }
      required: [firstName, lastName, dni, email]

    CustomerCreateDto:
      type: object
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        dni:       { type: string }
        email:     { type: string, format: email }
      required: [firstName, lastName, dni, email]

    CustomerUpdateDto:
      type: object
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        email:     { type: string, format: email }

    CustomerPage:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/CustomerDto' }
        totalElements: { type: integer, format: int64 }
        totalPages:    { type: integer, format: int32 }
        number:        { type: integer }
        size:          { type: integer }
        first:         { type: boolean }
        last:          { type: boolean }
        sort:          { type: string }
